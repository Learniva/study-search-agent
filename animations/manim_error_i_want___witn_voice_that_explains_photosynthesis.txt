Manim error for topic: i want   witn voice that explains photosynthesis
Parsed error: Error: 'BezierCurve' is not defined. Check for typos or missing imports.
Command: manim -qh /var/folders/vm/sktpc50n06z_z9xs2p2p39vc0000gn/T/tmpc7l4g9sp.py ConceptAnimation -o i_want___witn_voice_that_explains_photosynthesis_animation --media_dir animations
Return code: 1
Full error message:
/Users/dabwitso/.virtualenvs/study-search-agent/lib/python3.12/site-packages/pydub/utils.py:170: RuntimeWarning: Couldn't find ffmpeg or avconv - defaulting to ffmpeg, but may not work
  warn("Couldn't find ffmpeg or avconv - defaulting to ffmpeg, but may not work", RuntimeWarning)
/bin/sh: sox: command not found
/Users/dabwitso/.virtualenvs/study-search-agent/lib/python3.12/site-packages/manim_voiceover/__init__.py:4: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
  import pkg_resources
╭─────────────────────────────── Traceback (most recent call last) ────────────────────────────────╮
│ /Users/dabwitso/.virtualenvs/study-search-agent/lib/python3.12/site-packages/manim/cli/render/co │
│ mmands.py:125 in render                                                                          │
│                                                                                                  │
│   122 │   │   │   try:                                                                           │
│   123 │   │   │   │   with tempconfig({}):                                                       │
│   124 │   │   │   │   │   scene = SceneClass()                                                   │
│ ❱ 125 │   │   │   │   │   scene.render()                                                         │
│   126 │   │   │   except Exception:                                                              │
│   127 │   │   │   │   error_console.print_exception()                                            │
│   128 │   │   │   │   sys.exit(1)                                                                │
│                                                                                                  │
│ /Users/dabwitso/.virtualenvs/study-search-agent/lib/python3.12/site-packages/manim/scene/scene.p │
│ y:237 in render                                                                                  │
│                                                                                                  │
│    234 │   │   """                                                                               │
│    235 │   │   self.setup()                                                                      │
│    236 │   │   try:                                                                              │
│ ❱  237 │   │   │   self.construct()                                                              │
│    238 │   │   except EndSceneEarlyException:                                                    │
│    239 │   │   │   pass                                                                          │
│    240 │   │   except RerunSceneException:                                                       │
│                                                                                                  │
│ /var/folders/vm/sktpc50n06z_z9xs2p2p39vc0000gn/T/tmpc7l4g9sp.py:24 in construct                  │
│                                                                                                  │
│    21 │   │   stem.next_to(soil, UP, buff=0)                                                     │
│    22 │   │                                                                                      │
│    23 │   │   # Roots (BezierCurve for organic look)                                             │
│ ❱  24 │   │   root1 = BezierCurve(stem.get_bottom(), stem.get_bottom() + DOWN * 0.5 + LEFT * 0   │
│    25 │   │   │   │   │   │   │   stem.get_bottom() + DOWN * 1.0 + LEFT * 0.8, color="#8B4513"   │
│    26 │   │   root2 = BezierCurve(stem.get_bottom(), stem.get_bottom() + DOWN * 0.4 + RIGHT *    │
│    27 │   │   │   │   │   │   │   stem.get_bottom() + DOWN * 0.9 + RIGHT * 0.6, color="#8B4513   │
╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
NameError: name 'BezierCurve' is not defined

Code:
from manim import *
from manim_voiceover import VoiceoverScene
from manim_voiceover.services.gtts import GTTSService
import numpy as np
import random

class ConceptAnimation(VoiceoverScene):
    def construct(self):
        self.set_speech_service(GTTSService(lang="en", tld="com"))

        # --- Step 1: Draw a plant rooted in soil with the sun shining above it. ---
        title = Text("Photosynthesis: How Plants Make Food", font_size=40, color=WHITE, weight=BOLD)
        title.to_edge(UP, buff=0.5)

        # Soil
        soil = Rectangle(width=14, height=1.5, color="#8B4513", fill_opacity=0.8, stroke_opacity=0)
        soil.to_edge(DOWN, buff=0)

        # Stem
        stem = Rectangle(width=0.3, height=3, color="#4CAF50", fill_opacity=1.0, stroke_opacity=0)
        stem.next_to(soil, UP, buff=0)

        # Roots (BezierCurve for organic look)
        root1 = BezierCurve(stem.get_bottom(), stem.get_bottom() + DOWN * 0.5 + LEFT * 0.5,
                            stem.get_bottom() + DOWN * 1.0 + LEFT * 0.8, color="#8B4513", stroke_width=4)
        root2 = BezierCurve(stem.get_bottom(), stem.get_bottom() + DOWN * 0.4 + RIGHT * 0.3,
                            stem.get_bottom() + DOWN * 0.9 + RIGHT * 0.6, color="#8B4513", stroke_width=4)
        roots = VGroup(root1, root2)

        # Leaves
        leaf1 = Ellipse(width=1.5, height=0.8, color="#4CAF50", fill_opacity=0.8, stroke_width=2)
        leaf1.rotate(30 * DEGREES).next_to(stem.get_center() + UP * 0.5, LEFT, buff=0.2)
        leaf2 = Ellipse(width=1.5, height=0.8, color="#4CAF50", fill_opacity=0.8, stroke_width=2)
        leaf2.rotate(-30 * DEGREES).next_to(stem.get_center() + UP * 1.0, RIGHT, buff=0.2)
        leaf3 = Ellipse(width=1.5, height=0.8, color="#4CAF50", fill_opacity=0.8, stroke_width=2)
        leaf3.rotate(20 * DEGREES).next_to(stem.get_center() + UP * 1.5, LEFT, buff=0.2)
        leaves = VGroup(leaf1, leaf2, leaf3)

        plant = VGroup(soil, roots, stem, leaves)
        plant.move_to(ORIGIN) # Center the plant
        plant.shift(DOWN * 0.5) # Shift down slightly to make space for sun/title

        # Sun
        sun = Circle(radius=0.7, color=GOLD, fill_opacity=1.0, stroke_opacity=0)
        sun.to_corner(UP + LEFT, buff=1.0)

        with self.voiceover(text="Photosynthesis is the process by which plants convert light energy into chemical energy, creating their own food.") as vo:
            self.play(Write(title))
            self.play(Create(soil), Create(roots), Create(stem), Create(leaves), Create(sun))
            self.wait(vo.duration * 0.5) # Wait for half the narration duration for visual emphasis

        # --- Step 2: Animate light rays from the sun hitting the leaves, labeling them 'Light Energy'. ---
        light_rays = VGroup()
        for i in range(5):
            ray = Line(sun.get_center() + random.uniform(-0.2, 0.2) * UP + random.uniform(-0.2, 0.2) * RIGHT,
                       leaves[random.randint(0, 2)].get_center() + random.uniform(-0.3, 0.3) * RIGHT,
                       color=YELLOW, stroke_width=3)
            light_rays.add(ray)
        
        light_label = Text("Light Energy", font_size=30, color=YELLOW).next_to(sun, RIGHT, buff=0.5)

        with self.voiceover(text="It all begins with sunlight. Plants capture this light energy, primarily through their leaves.") as vo:
            self.play(LaggedStart(*[GrowFromCenter(ray) for ray in light_rays], lag_ratio=0.2, run_time=2))
            self.play(Write(light_label))
            self.wait(vo.duration * 0.5)

        # --- Step 3: Animate water droplets entering the roots from the soil and traveling up the stem to the leaves, labeling them 'Water (H₂O)'. ---
        water_label = MathTex("H_2O", font_size=30, color=BLUE).next_to(roots, LEFT, buff=0.5)
        water_dots = VGroup()
        for _ in range(5):
            start_point = soil.get_bottom() + random.uniform(-5, 5) * RIGHT + DOWN * random.uniform(0.1, 0.3)
            dot = Dot(start_point, radius=0.08, color=BLUE, fill_opacity=0.8)
            water_dots.add(dot)

        with self.voiceover(text="Next, water is absorbed by the roots from the soil. It then travels up the stem to reach the leaves.") as vo:
            self.play(Write(water_label))
            self.play(
                LaggedStart(*[
                    ApplyMethod(dot.move_to, leaves[random.randint(0, 2)].get_center() + random.uniform(-0.1, 0.1) * UP)
                    for dot in water_dots
                ], lag_ratio=0.3, run_time=3),
                Create(water_dots, run_time=3)
            )
            self.wait(vo.duration * 0.5)
        
        # Fade out individual water dots for now, will reuse later
        self.play(FadeOut(water_dots))

        # --- Step 4: Animate carbon dioxide molecules (CO₂) from the air entering the leaves, labeling them 'Carbon Dioxide (CO₂)'. ---
        co2_label = MathTex("CO_2", font_size=30, color=GRAY).next_to(leaves, UP, buff=0.5)
        co2_mols = VGroup()
        for _ in range(5):
            start_point = leaves.get_top() + UP * random.uniform(0.5, 1.0) + random.uniform(-2, 2) * RIGHT
            mol = MathTex("CO_2", font_size=20, color=GRAY).move_to(start_point)
            co2_mols.add(mol)

        with self.voiceover(text="Carbon dioxide, a gas from the air, enters the leaves through tiny pores.") as vo:
            self.play(Write(co2_label))
            self.play(
                LaggedStart(*[
                    ApplyMethod(mol.move_to, leaves[random.randint(0, 2)].get_center() + random.uniform(-0.1, 0.1) * UP + random.uniform(-0.1, 0.1) * RIGHT)
                    for mol in co2_mols
                ], lag_ratio=0.3, run_time=2),
                Create(co2_mols, run_time=2)
            )
            self.wait(vo.duration * 0.5)
        
        # Fade out individual CO2 molecules for now
        self.play(FadeOut(co2_mols))

        # --- Step 5: Zoom into a cross-section of a leaf, then into a plant cell, and finally highlight a chloroplast within the cell. ---
        self.play(
            FadeOut(title), FadeOut(sun), FadeOut(light_rays), FadeOut(light_label),
            FadeOut(water_label), FadeOut(co2_label),
            plant.animate.scale(0.5).to_corner(UP + LEFT),
            run_time=2
        )
        self.wait(0.5)

        # Leaf cross-section (larger view)
        leaf_section = RoundedRectangle(width=6, height=3, corner_radius=0.3, color=GREEN, fill_opacity=0.15, stroke_width=3)
        leaf_section.move_to(ORIGIN)

        with self.voiceover(text="Inside the leaves, we find specialized cells. Let's zoom in further.") as vo:
            self.play(FadeIn(leaf_section, scale=0.5))
            self.wait(vo.duration * 0.5)

        # Plant cell inside leaf section
        plant_cell = RoundedRectangle(width=2.5, height=1.5, corner_radius=0.1, color=TEAL, fill_opacity=0.2, stroke_width=2)
        plant_cell.move_to(leaf_section.get_center())

        with self.voiceover(text="Within each plant cell, there are tiny organelles called chloroplasts.") as vo:
            self.play(leaf_section.animate.scale(0.5).to_corner(UP + LEFT),
                      FadeIn(plant_cell, scale=0.5))
            self.wait(vo.duration * 0.5)

        # Chloroplast inside plant cell
        chloroplast = Ellipse(width=1.0, height=0.6, color="#64FFDA", fill_opacity=0.7, stroke_width=2)
        chloroplast.move_to(plant_cell.get_center())
        
        chloroplast_label = Text("Chloroplast", font_size=32, color="#64FFDA", weight=BOLD).next_to(chloroplast, DOWN, buff=0.5)

        with self.voiceover(text="These chloroplasts are the powerhouses of photosynthesis, where all the magic happens.") as vo:
            self.play(plant_cell.animate.scale(0.5).to_corner(UP + LEFT),
                      FadeIn(chloroplast, scale=0.5))
            self.play(Write(chloroplast_label))
            self.wait(vo.duration * 0.5)

        # Reposition chloroplast and label for central focus
        self.play(
            VGroup(chloroplast, chloroplast_label).animate.move_to(ORIGIN + RIGHT * 2).scale(1.5),
            FadeOut(plant_cell), FadeOut(leaf_section)
        )
        self.wait(1)

        # --- Step 6: Show the inputs (Light Energy, H₂O, CO₂) converging into the chloroplast. ---
        # Recreate inputs near the chloroplast
        light_ray_small = Line(chloroplast.get_top() + UP*1.5 + LEFT*1.5, chloroplast.get_top() + LEFT*0.3, color=YELLOW, stroke_width=3)
        h2o_mol_small = MathTex("H_2O", font_size=24, color=BLUE).move_to(chloroplast.get_left() + LEFT*1.5 + DOWN*0.5)
        co2_mol_small = MathTex("CO_2", font_size=24, color=GRAY).move_to(chloroplast.get_top() + UP*1.0 + RIGHT*0.5)

        with self.voiceover(text="Inside the chloroplast, light energy, water, and carbon dioxide all come together.") as vo:
            self.play(
                Create(light_ray_small),
                Write(h2o_mol_small),
                Write(co2_mol_small)
            )
            self.play(
                light_ray_small.animate.move_to(chloroplast.get_center()),
                h2o_mol_small.animate.move_to(chloroplast.get_center()),
                co2_mol_small.animate.move_to(chloroplast.get_center()),
                run_time=2
            )
            self.wait(vo.duration * 0.5)
        
        # Fade out the converging inputs as they are "processed"
        self.play(FadeOut(light_ray_small), FadeOut(h2o_mol_small), FadeOut(co2_mol_small))

        # --- Step 7: Display the overall chemical equation for photosynthesis: 6CO₂ + 6H₂O + Light Energy → C₆H₁₂O₆ + 6O₂ inside or next to the chloroplast. ---
        equation = MathTex(
            "6CO_2", " + ", "6H_2O", " + ", "\\text{Light Energy}", " \\rightarrow ", "C_6H_{12}O_6", " + ", "6O_2",
            font_size=36
        )
        equation.move_to(chloroplast.get_center() + UP * 2.5) # Position above chloroplast
        equation.set_color_by_tex("CO_2", GRAY)
        equation.set_color_by_tex("H_2O", BLUE)
        equation.set_color_by_tex("\\text{Light Energy}", YELLOW)
        equation.set_color_by_tex("C_6H_{12}O_6", GREEN)
        equation.set_color_by_tex("O_2", RED)
        
        # Highlight the arrow and the equation parts
        arrow_index = 5 # Index of " \\rightarrow "

        with self.voiceover(text="This complex process can be summarized by a chemical equation, showing the inputs and outputs.") as vo:
            self.play(Write(equation[:arrow_index]), run_time=2)
            self.wait(vo.duration * 0.3)
            self.play(Write(equation[arrow_index]), run_time=0.5)
            self.wait(vo.duration * 0.3)
            self.play(Write(equation[arrow_index+1:]), run_time=2)
            self.wait(vo.duration * 0.5)

        # --- Step 8: Animate glucose molecules (C₆H₁₂O₆) being produced and moving throughout the plant (e.g., to roots, other parts of the plant), labeling them 'Glucose (Sugar)'. ---
        glucose_label = MathTex("C_6H_{12}O_6", "\\text{ (Sugar)}", font_size=30, color=GREEN)
        glucose_label.next_to(equation, DOWN, buff=1.0).shift(LEFT*2)
        glucose_label.set_color_by_tex("\\text{ (Sugar)}", WHITE)

        glucose_mols = VGroup()
        for _ in range(3):
            mol = MathTex("C_6H_{12}O_6", font_size=20, color=GREEN).move_to(chloroplast.get_center())
            glucose_mols.add(mol)

        with self.voiceover(text="The primary product is glucose, a sugar, which serves as food for the plant and energy for its growth.") as vo:
            self.play(Write(glucose_label))
            self.play(
                LaggedStart(*[
                    ApplyMethod(mol.animate.shift(DOWN * random.uniform(2, 3) + LEFT * random.uniform(-1, 1)))
                    for mol in glucose_mols
                ], lag_ratio=0.5, run_time=3),
                Create(glucose_mols, run_time=3)
            )
            self.wait(vo.duration * 0.5)

        # --- Step 9: Animate oxygen molecules (O₂) being released from the leaves into the air, labeling them 'Oxygen (O₂)'. ---
        oxygen_label = MathTex("O_2", "\\text{ (Oxygen)}", font_size=30, color=RED)
        oxygen_label.next_to(equation, DOWN, buff=1.0).shift(RIGHT*2)
        oxygen_label.set_color_by_tex("\\text{ (Oxygen)}", WHITE)

        oxygen_mols = VGroup()
        for _ in range(3):
            mol = MathTex("O_2", font_size=20, color=RED).move_to(chloroplast.get_center())
            oxygen_mols.add(mol)

        with self.voiceover(text="Another vital product is oxygen, which is released into the atmosphere, essential for all living beings.") as vo:
            self.play(Write(oxygen_label))
            self.play(
                LaggedStart(*[
                    ApplyMethod(mol.animate.shift(UP * random.uniform(2, 3) + RIGHT * random.uniform(-1, 1)))
                    for mol in oxygen_mols
                ], lag_ratio=0.5, run_time=3),
                Create(oxygen_mols, run_time=3)
            )
            self.wait(vo.duration * 0.5)

        self.wait(1)
        self.play(
            FadeOut(equation), FadeOut(glucose_label), FadeOut(oxygen_label),
            FadeOut(glucose_mols), FadeOut(oxygen_mols),
            FadeOut(chloroplast), FadeOut(chloroplast_label)
        )
        self.wait(1)

        # --- Step 10: Revert to the full plant view, showing the continuous cycle of inputs (light, water, CO2) and outputs (glucose, oxygen). ---
        # Re-center the plant
        self.play(plant.animate.scale(2).move_to(ORIGIN + DOWN * 0.5))
        self.play(FadeIn(title))
        self.play(FadeIn(sun), FadeIn(light_label), FadeIn(water_label), FadeIn(co2_label))
        
        # Briefly re-animate the flow of inputs
        light_rays_final = VGroup()
        for i in range(3):
            ray = Line(sun.get_center() + random.uniform(-0.2, 0.2) * UP + random.uniform(-0.2, 0.2) * RIGHT,
                       leaves[random.randint(0, 2)].get_center() + random.uniform(-0.3, 0.3) * RIGHT,
                       color=YELLOW, stroke_width=3)
            light_rays_final.add(ray)

        water_dots_final = VGroup()
        for _ in range(3):
            start_point = soil.get_bottom() + random.uniform(-5, 5) * RIGHT + DOWN * random.uniform(0.1, 0.3)
            dot = Dot(start_point, radius=0.08, color=BLUE, fill_opacity=0.8)
            water_dots_final.add(dot)
        
        co2_mols_final = VGroup()
        for _ in range(3):
            start_point = leaves.get_top() + UP * random.uniform(0.5, 1.0) + random.uniform(-2, 2) * RIGHT
            mol = MathTex("CO_2", font_size=20, color=GRAY).move_to(start_point)
            co2_mols_final.add(mol)

        with self.voiceover(text="This entire process is a continuous cycle, vital for life on Earth.") as vo:
            self.play(
                LaggedStart(*[GrowFromCenter(ray) for ray in light_rays_final], lag_ratio=0.2, run_time=1.5),
                LaggedStart(*[ApplyMethod(dot.move_to, leaves[random.randint(0, 2)].get_center()) for dot in water_dots_final], lag_ratio=0.3, run_time=1.5),
                Create(water_dots_final, run_time=1.5),
                LaggedStart(*[ApplyMethod(mol.move_to, leaves[random.randint(0, 2)].get_center()) for mol in co2_mols_final], lag_ratio=0.3, run_time=1.5),
                Create(co2_mols_final, run_time=1.5)
            )
            self.wait(vo.duration * 0.5)

        # Briefly animate outputs
        glucose_label_final = Text("Glucose (Sugar)", font_size=24, color=GREEN).next_to(stem, DOWN, buff=0.8)
        oxygen_label_final = Text("Oxygen (O₂)", font_size=24, color=RED).next_to(leaves, UP, buff=0.8)

        with self.voiceover(text="Plants take in light, water, and carbon dioxide, producing food and the oxygen we breathe.") as vo:
            self.play(FadeIn(glucose_label_final, shift=UP*0.2), FadeIn(oxygen_label_final, shift=DOWN*0.2))
            self.wait(vo.duration * 0.5)

        self.play(
            FadeOut(title), FadeOut(plant), FadeOut(sun), FadeOut(light_label), FadeOut(water_label), FadeOut(co2_label),
            FadeOut(light_rays_final), FadeOut(water_dots_final), FadeOut(co2_mols_final),
            FadeOut(glucose_label_final), FadeOut(oxygen_label_final)
        )
        self.wait(1)
